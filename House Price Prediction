# house_price_prediction.py

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import joblib

# Generate synthetic dataset
np.random.seed(42)
n_samples = 1000
X = pd.DataFrame({
    'SquareFeet': np.random.normal(1500, 500, n_samples),
    'Bedrooms': np.random.randint(1, 6, n_samples),
    'Age': np.random.randint(0, 50, n_samples)
})
# Simulate house prices with some noise
y = 50000 + (X['SquareFeet'] * 100) + (X['Bedrooms'] * 10000) - (X['Age'] * 500) + np.random.normal(0, 10000, n_samples)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluate
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared Score: {r2:.2f}")

# Save model
joblib.dump(model, 'synthetic_house_price_model.pkl')
